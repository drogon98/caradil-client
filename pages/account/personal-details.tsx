import Head from "next/head";
import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from "react";
import { AuthWrapper } from "../../components/AuthWrapper";
import AccountLayout from "../../components/layouts/AccountLayout";
import { Loading } from "../../components/Loading";
import {
  EditProfileInput,
  PhotoInput,
  useEditProfileMutation,
  useGetAuthUserQuery,
  useUploadFileMutation,
} from "../../graphql_types/generated/graphql";

interface PersonalDetailsProps {}

/**
 * @author @CodeYourEmpire
 * @function @PersonalDetails
 **/

const PersonalDetails: FC<PersonalDetailsProps> = (props) => {
  const [values, setValues] = useState<EditProfileInput>({
    user_name: "",
    first_name: "",
    last_name: "",
    phone: "",
    business_name: "",
  });
  const [mainLoading, setMainLoading] = useState(true);
  const [avatar, setAvatar] = useState<PhotoInput>();
  const [uploadFile] = useUploadFileMutation();
  const [editProfile] = useEditProfileMutation();
  const { data, loading } = useGetAuthUserQuery({
    fetchPolicy: "network-only",
  });

  useEffect(() => {
    if (data?.getUser.user) {
      const tempData = { ...data.getUser.user };
      delete tempData.__typename;
      delete tempData.id;
      if (tempData.avatar?.public_id) {
        setAvatar({ ...(tempData.avatar as PhotoInput) });
      }
      delete tempData.avatar;
      delete tempData.email;
      setValues({ ...(tempData as EditProfileInput) });
    }
  }, [data]);

  useEffect(() => {
    if (!loading && data?.getUser.user) {
      setMainLoading(false);
    }
  }, [data, loading]);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setValues({ ...values, [e.target.name]: e.target.value });
  };

  const handleUpload = async (e: ChangeEvent<HTMLInputElement>) => {
    try {
      const file = e.target.files?.[0];

      const response = await uploadFile({ variables: { file } });
      const newPhoto = response.data?.singleUpload;
      delete newPhoto?.__typename;
      setAvatar(newPhoto);
      e.target.value = "";
    } catch (error) {
      console.log("error :>> ", error);
      e.target.value = "";
    }
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    let payload;
    if (avatar) {
      payload = { ...values, avatar };
    } else {
      payload = { ...values };
    }

    let response;
    try {
      response = await editProfile({ variables: { input: payload } });
    } catch (error) {
      let errorMessage = "";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      console.log("errorMessage :>> ", errorMessage);
      return;
      // setError("Network Error!");
    }

    // if (response.data?.)
  };

  // console.log("data :>> ", data);
  // console.log("avatar :>> ", avatar);

  return (
    <>
      <Head>
        <title>Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AuthWrapper>
        <AccountLayout>
          {mainLoading ? (
            <Loading />
          ) : (
            <div className="p-2">
              {" "}
              <h3>Personal Details</h3>
              <div className="container my-5">
                <form
                  className="form-group profile-form"
                  onSubmit={handleSubmit}
                >
                  <div className="row">
                    <div className="col-md-4 d-flex justify-content-center flex-column align-items-center">
                      <img
                        src={
                          avatar?.secure_url
                            ? avatar.secure_url
                            : "/images/avatar.svg"
                        }
                        className="rounded-circle"
                        height="250px"
                        width="250px"
                      />
                      <input
                        type="file"
                        accept="image/*"
                        // required
                        onChange={handleUpload}
                        className="mt-3"
                      />
                    </div>

                    <div className="col-md-8 mt-4 ">
                      <div>
                        <label htmlFor="username">Username</label>
                        <input
                          onChange={handleChange}
                          value={values.user_name ?? ""}
                          id="username"
                          type="text"
                          name="user_name"
                          className="form-control"
                          // required
                        />
                      </div>

                      <div>
                        <label htmlFor="businessName">Business Name</label>
                        <input
                          onChange={handleChange}
                          value={values.business_name ?? ""}
                          id="businessName"
                          type="text"
                          name="business_name"
                          className="form-control"
                          // required
                        />
                      </div>
                      <div>
                        <label htmlFor="firstName">First Name</label>
                        <input
                          onChange={handleChange}
                          value={values.first_name ?? ""}
                          id="firstName"
                          type="text"
                          name="first_name"
                          className="form-control"
                          // required
                        />
                      </div>
                      <div>
                        <label htmlFor="lastName">Last Name</label>
                        <input
                          onChange={handleChange}
                          value={values.last_name ?? ""}
                          id="lastName"
                          type="text"
                          name="last_name"
                          className="form-control"
                          // required
                        />
                      </div>
                      <div>
                        <label htmlFor="phone">Phone</label>
                        <input
                          onChange={handleChange}
                          value={values.phone ?? ""}
                          id="phone"
                          type="text"
                          name="phone"
                          className="form-control"
                          // required
                        />
                      </div>
                    </div>
                  </div>
                  <div className="d-grid gap-2 mt-5">
                    <button type="submit" className="btn bgOrange">
                      Update
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}
        </AccountLayout>
      </AuthWrapper>
    </>
  );
};

export default PersonalDetails;
